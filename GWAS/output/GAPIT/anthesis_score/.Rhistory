#
# ###=========================================#### # ### run it as GWAS model
# ###=========================================####
#
summary(ans2)
plot(ans2$scores[1,])
plot(ans2$r2m[1,])
#
# ###=========================================#### # ### run it as GWAS model
# ###=========================================####
#
ans2 <- GWAS(tuber_shape~1, random=~vs(Name,Gu=A),
rcov=~units,
gTerm = "Name", M=marks, data=DT2)
summary(ans2)
plot(ans2$scores[1,])
plot(ans2$r2m[1,])
#
# ###=========================================#### # ### run it as GWAS model
# ###=========================================####
#
ans2 <- GWAS(tuber_shape~1, random=~vs(Name,Gu=A),
rcov=~units,
gTerm = "Name", M=marks, data=DT2)
#
# ###=========================================#### # ### run it as GWAS model
# ###=========================================####
#
ans2 <- GWAS(tuber_shape~1, random=~vs(,Gu=A),
rcov=~units,
gTerm = "Name", M=marks, data=DT2)
Name
#
# ###=========================================#### # ### run it as GWAS model
# ###=========================================####
#
ans2 <- GWAS(tuber_shape~1, random=~vs(Name,Gu=A),
rcov=~units,
gTerm = "Name", M=marks, data=DT2)
trait
write.csv(anthesis_score[[2]], "/users/kayla.altendorf/Desktop/phenotype.csv", row.names = F)
hist(anthesis_score[[2]])
hist(anthesis_score[[2]]$emmean)
hist(sqrt(anthesis_score[[2]]$emmean))
read.csv("/users/kayla.altendorf/Desktop/phenotype.csv", header = T)
phenotype <- read.csv("/users/kayla.altendorf/Desktop/phenotype.csv", header = T)
genotype <- read.table("/users/kayla.altendorf/Downloads/snp_matrix.txt", header = T)
genotype[1:10, 1:10]
library('sommer')
head(DT)
common <- intersect(phenotype$Name,rownames(snp_matrix$M))
head(numo)
numo[1:10, 1:10]
GT
GT[1:10, 1:10]
genotype[1:10, 1:10]
# gapit results from this same trait and environment combo
gapit <- read.csv("/users/kayla.altendorf/Desktop/GAPIT.MLM.anthesis_score_stp18.GWAS.Results.csv", header = T)
gapit
head(gapit)
phenotype
# load data
phenotype <- read.csv("/users/kayla.altendorf/Desktop/phenotype.csv", header = T) %>%
mutate(famID = substr(longID), 1, 5)
# load data
phenotype <- read.csv("/users/kayla.altendorf/Desktop/phenotype.csv", header = T) %>%
mutate(famID = substr(longID), 1, 5)
# load data
phenotype <- read.csv("/users/kayla.altendorf/Desktop/phenotype.csv", header = T) %>%
mutate(famID = substr(longID, 1, 5))
# load data
phenotype <- read.csv("/users/kayla.altendorf/Desktop/phenotype.csv", header = T) %>%
mutate(famID = substr(longID, 1, 5))
phenotype
# Packages
library(sommer)
library(tidyverse)
# Working directory
proj_dir <- "/users/kayla.altendorf/Downloads/IWG_NAM_GWASsommer/"
proj_dir <- "."
data_dir <- file.path(proj_dir, "data")
data_dir
# Read phenotypes
phenotype <- read_csv(file.path(data_dir, "phenotype.csv")) %>%
mutate(famID = substr(longID, 1, 5)) %>% # Add family variable
mutate_if(is.character, as.factor) %>%
rename(pheno = emmean)
data_dir
proj_dir <- "."
data_dir <- file.path(proj_dir, "data")
# Working directory
proj_dir <- "/users/kayla.altendorf/Downloads/IWG_NAM_GWASsommer/"
data_dir <- file.path(proj_dir, "data")
# Read phenotypes
phenotype <- read_csv(file.path(data_dir, "phenotype.csv")) %>%
mutate(famID = substr(longID, 1, 5)) %>% # Add family variable
mutate_if(is.character, as.factor) %>%
rename(pheno = emmean)
data_dir
# Read phenotypes
phenotype <- read_csv(file.path(data_dir, "phenotype.csv")) %>%
mutate(famID = substr(longID, 1, 5)) %>% # Add family variable
mutate_if(is.character, as.factor) %>%
rename(pheno = emmean)
# Read markers
genotype <- read_tsv(file.path(data_dir, "snp_matrix.txt"))
# Convert genotypes into a matrix
geno_mat <- genotype %>%
select(-alleles:-pos) %>%
rename(marker = rs) %>%
as.data.frame() %>%
column_to_rownames("marker") %>%
t()
# Convert genotypes into a matrix
geno_mat <- genotype %>%
select(-alleles:-pos) %>%
rename(marker = rs) %>%
as.data.frame() %>%
column_to_rownames("marker") %>%
t()
genotype
# Convert genotypes into a matrix
geno_mat <- genotype %>%
select(-alleles:-pos) %>%
rename(marker = rs)
library(plyr)
# Convert genotypes into a matrix
geno_mat <- genotype %>%
select(-alleles:-pos) %>%
rename(marker = rs) %>%
as.data.frame() %>%
column_to_rownames("marker") %>%
t()
# Convert genotypes into a matrix
geno_mat <- genotype %>%
select(-alleles:-pos) %>%
rename(marker = rs) %>%
as.data.frame()
# Convert genotypes into a matrix
geno_mat <- genotype %>%
select(-alleles:-pos)
# Convert genotypes into a matrix
geno_mat <- genotype %>%
dplyr::select(-alleles:-pos)
# Convert genotypes into a matrix
geno_mat <- genotype %>%
dplyr::select(-alleles:-pos) %>%
rename(marker = rs)
detach("package:plyr", unload = TRUE)
# Convert genotypes into a matrix
geno_mat <- genotype %>%
dplyr::select(-alleles:-pos) %>%
rename(marker = rs)
# Convert genotypes into a matrix
geno_mat <- genotype %>%
dplyr::select(-alleles:-pos) %>%
rename(marker = rs) %>%
as.data.frame()
# Convert genotypes into a matrix
geno_mat <- genotype %>%
dplyr::select(-alleles:-pos) %>%
rename(marker = rs) %>%
as.data.frame() %>%
column_to_rownames("marker") %>%
t()
# Remove individuals from phenotype with no markers; remove individuals from pheno
# with no genotypes
common_indiv <- intersect(phenotype$longID, row.names(geno_mat))
geno_mat1 <- geno_mat[common_indiv,,drop = FALSE]
phenotype1 <- droplevels(subset(phenotype, longID %in% common_indiv))
geno_mat1 <- geno_mat[common_indiv, drop = FALSE]
geno_mat1 <- geno_mat[common_indiv,,]drop = FALSE]
# Convert genotypes into a matrix
geno_mat <- genotype %>%
dplyr::select(-alleles:-pos) %>%
rename(marker = rs) %>%
as.data.frame() %>%
column_to_rownames("marker") %>%
t()
# Remove individuals from phenotype with no markers; remove individuals from pheno
# with no genotypes
common_indiv <- intersect(phenotype$longID, row.names(geno_mat))
geno_mat1 <- geno_mat[common_indiv,,drop = FALSE]
phenotype1 <- droplevels(subset(phenotype, longID %in% common_indiv))
# Calculate additive relationship matrix
K <- A.mat(X = geno_mat1, min.MAF = 0, max.missing = 1)
# Calculate additive relationship matrix
K <- A.mat(X = geno_mat1, min.MAF = 0.005, max.missing = 1)
# Get PCs from K
K_pcs <- prcomp(K)
# Add to phenotypes1
phenotypes2 <- as.data.frame(K_pcs$rotation) %>%
rownames_to_column("longID") %>%
left_join(phenotype1, .) %>%
mutate(longID = as.factor(longID))
# Fit full models
# First fit a model with just the random polygenic effect
model1 <- mmer(fixed = pheno ~ 1, random = ~ vs(longID, Gu = K), data = phenotypes2)
# Add family effect
model1alt <- mmer(fixed = pheno ~ 1 + famID, random = ~ vs(longID, Gu = K), data = phenotypes2)
# Next fit a model with 1 fixed PC from K
model2 <- mmer(fixed = pheno ~ 1 + PC1, random = ~ vs(longID, Gu = K), data = phenotypes2)
# Next fit a model with 2 fixed PCs from K
model3 <- mmer(fixed = pheno ~ 1 + PC1 + PC2, random = ~ vs(longID, Gu = K), data = phenotypes2)
# Next add family effect (fixed)
model4 <- mmer(fixed = pheno ~ 1 + PC1 + PC2 + famID, random = ~ vs(longID, Gu = K), data = phenotypes2)
# Show LL results
list(model1 = model1, model1alt = model1alt, model2 = model2, model3 = model3, model4 = model4) %>%
map_dbl(., ~{ last(.x$monitor[1,]) }) %>%
as_tibble_row() %>%
gather(model, LL) %>%
mutate(terms = c("indiv", "indiv + fam", "indiv + PC1", "indiv + PC1 + PC2", "indiv + fam + PC1 + PC2"))
# Run GWAS using model4
model4_gwas <- GWAS(fixed = pheno ~ 1 + famID, random = ~ vs(longID, Gu = K), data = as.data.frame(phenotypes2),
M = geno_mat1, n.PC = 2, min.MAF = 0, gTerm = "u:longID")
# Save this
save("model4_gwas", file = "sommer_GWAS_model4_out.RData")
# Load the results
load("sommer_GWAS_model4_out.RData")
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., select(genotype, marker = rs, chrom, pos)) %>%
# rename columns for sommer compatability
rename(Chrom = chrom, Position = pos) %>%
rename_all(make.names) %>%
as_tibble()
# Manhattan plot
manhattan(map = marker_scores, PVCN = "pheno.score", fdr.level = 0.05)
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., select(genotype, marker = rs, chrom, pos)) %>%
# rename columns for sommer compatability
rename(Chrom = chrom, Position = pos) %>%
rename_all(make.names) %>%
as_tibble()
library(plyr)
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., select(genotype, marker = rs, chrom, pos)) %>%
# rename columns for sommer compatability
rename(Chrom = chrom, Position = pos) %>%
rename_all(make.names) %>%
as_tibble()
detach("package:tidyr", unload = TRUE)
library(tidyr)
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., select(genotype, marker = rs, chrom, pos)) %>%
# rename columns for sommer compatability
rename(Chrom = chrom, Position = pos) %>%
rename_all(make.names) %>%
as_tibble()
detach("package:plyr", unload = TRUE)
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., select(genotype, marker = rs, chrom, pos)) %>%
# rename columns for sommer compatability
rename(Chrom = chrom, Position = pos) %>%
rename_all(make.names) %>%
as_tibble()
# Manhattan plot
manhattan(map = marker_scores, PVCN = "pheno.score", fdr.level = 0.05)
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., select(genotype, marker = rs, chrom, pos)) %>%
# rename columns for sommer compatability
rename(Chrom = chrom, Position = pos) %>%
rename_all(make.names) %>%
as_tibble()
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., select(genotype, marker = rs, chrom, pos)) %>%
# rename columns for sommer compatability
plyr::rename(Chrom = chrom, Position = pos) %>%
rename_all(make.names) %>%
as_tibble()
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., select(genotype, marker = rs, chrom, pos))
# Get the marker scores
marker_scores <- as.data.frame(t(model4_gwas$scores)) %>%
rownames_to_column("marker") %>%
# Add positions
left_join(., dplyr::select(genotype, marker = rs, chrom, pos)) %>%
# rename columns for sommer compatability
rename(Chrom = chrom, Position = pos) %>%
rename_all(make.names) %>%
as_tibble()
# Manhattan plot
manhattan(map = marker_scores, PVCN = "pheno.score", fdr.level = 0.05)
# gapit results from this same trait and environment combo
gapit <- read_csv(file.path(data_dir, "GAPIT.MLM.anthesis_score_stp18.GWAS.Results.csv"))
# Rename and reduce columns
gapit2 <- gapit %>%
select(marker = SNP, gapit_pvalue = P.value, gapit_effect = effect, gapit_pvalue_adj = `FDR_Adjusted_P-values`)
# Rename and reduce columns
gapit2 <- gapit %>%
dplyr::select(marker = SNP, gapit_pvalue = P.value, gapit_effect = effect, gapit_pvalue_adj = `FDR_Adjusted_P-values`)
# Merge with the sommer result
marker_scores_merged <- inner_join(marker_scores, gapit2) %>%
# Convert pheno.score to p.value
mutate(sommer_pvalue = 10^-pheno.score) %>%
rename(sommer_effect = pheno.beta)
# Plot p-value comparison
qplot(x = sommer_pvalue, y = gapit_pvalue, data = marker_scores_merged)
# Plot effect size comparison
qplot(x = sommer_effect, y = gapit_effect, data = marker_scores_merged)
# Weird results; probably due to ref/alt switch
qplot(x = abs(sommer_effect), y = abs(gapit_effect), data = marker_scores_merged) # Better
# Look at the significant SNPs
sommer_sig_snps <- marker_scores %>%
filter(pheno.score >= sommer:::fdr(p = marker_scores$pheno.score, fdr.level = 0.05)$fdr.10) %>%
arrange(desc(pheno.score))
# GAPIT significant SNPs
gapit_sig_snps <- gapit2 %>%
filter(gapit_pvalue_adj <= 0.05)
# Intersect sommer and gapit significant SNPs
both_sig_snps <- sommer_sig_snps %>%
filter(marker %in% gapit_sig_snps$marker)
# Which SNPs are new to sommer?
sommer_sig_snps_unique <- sommer_sig_snps %>%
filter(! marker %in% gapit_sig_snps$marker)
sommer_sig_snps_unique
both_sig_snps
# GAPIT significant SNPs
gapit_sig_snps <- gapit2 %>%
filter(gapit_pvalue_adj <= 0.05)
gapit_sig_snps
sommer_sig_snps
list.dirs("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Domestication Traits/Scripts for Github/Phenotypic Data Analysis/output/")
dirs <- list.dirs("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Introduction/Scripts for Github/Phenotypic Data Analysis/output")
dirs
dirs <- list.dirs("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Introduction/Scripts for Github/Phenotypic Data Analysis/output/")
dirs
dirs <- list.dirs("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Domestication Traits/Scripts for Github/Phenotypic Data Analysis/output/"
dirs <- list.dirs("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Domestication Traits/Scripts for Github/Phenotypic Data Analysis/output/")
dirs <- list.dirs("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Domestication Traits/Scripts for Github/Phenotypic Data Analysis/output/")
dirs[grepl(all_traits[i], dirs,)]
dirs[grepl(all_traits[i], dirs),]
all_traits[i]
all_traits <- c("rachis_breaks_mean", "floret_score_mean", "reproductive_tiller_ct", "threshability", "floret_site_utilization", "height", "thousand_grain_weight")
dirs[grepl(all_traits[i], dirs),]
dirs[grepl(all_traits[i], dirs)]
dir <- dirs[grepl(all_traits[i], dirs)]
anova <- dir[grepl("anova"), dir)]
anova <- dir[grepl("anova"), dir)]
anova <- dir[grepl("anova", dir)]
anova
anova <- list.files(dir)
anova
anovas <- files[grepl("anova", files)]
anovas
files <- list.files(dir)
anovas <- files[grepl("anova", files)]
anovas
anovas <- files[grepl("anova", files)][-5]
anovas
an <- read.table(anovas[j], header = T)
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
an <- read.table(anovas[j], header = T)
j = 1
an <- read.table(anovas[j], header = F)
an <- read.table(anovas[j], skip =
}
}
an <- read.table(anovas[j], skip =1 )
an
an <- read.table(anovas[j], skip = 1)
an
an <- read.table(anovas[j], skip = 1, header = T)
an
an <- read.table(anovas[j], skip = 1, header = F)
an
anovas <- list()
trait_anovas <- list()
do.call("rbind", all_anovas)
all_anovas <- list()
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], skip = 1, header = F)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
do.call("rbind", all_anovas)
all_anovas
trait_anovas[[j]] <- read.table(anovas[j])
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T)
trait_anovas
read.table(anovas[j], header = T, fill = T)
out_file <- ("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Domestication Traits/Submission/Figures and Tables/within_loc_anovas.txt")
anovas[j]
envs <- c("STP 2017", "STP 2018", "TLI 2017", "TLI 2018")
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T)
cat("\n", out_file, append = T)
write.table(paste(all_traits[i], envs[j], sep = " "), out_file, append = T)
write.table(trait_anovas[[j]], out_file, append = T)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
out_file <- ("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Domestication Traits/Submission/Figures and Tables/within_loc_anovas.txt")
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T)
write.table(paste(all_traits[i], envs[j], sep = " "), out_file, append = T)
write.table(trait_anovas[[j]], out_file, append = T)
cat("\n", out_file, append = T)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T, sep = "/t")
write.table(paste(all_traits[i], envs[j], sep = " "), out_file, append = T, sep = "/t")
write.table(trait_anovas[[j]], out_file, append = T, sep = "/t")
cat("\n", out_file, append = T)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T)
write.table(paste(all_traits[i], envs[j], sep = " "), out_file, append = T, sep = "/t")
write.table(trait_anovas[[j]], out_file, append = T, sep = "/t")
cat("\n", out_file, append = T)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
write.table(trait_anovas[[j]], out_file, append = T, sep = "/t", quote = F)
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T)
write.table(paste(all_traits[i], envs[j], sep = " "), out_file, append = T, sep = "/t", quote = F)
write.table(trait_anovas[[j]], out_file, append = T, sep = "/t", quote = F)
cat("\n", out_file, append = T)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T)
write.table(paste(all_traits[i], envs[j], sep = " "), out_file, append = T, sep = "\t", quote = F)
write.table(trait_anovas[[j]], out_file, append = T, sep = "\t", quote = F)
cat("\n", out_file, append = T)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
write.table(paste(all_traits[i], envs[j], sep = " "), out_file, append = T, sep = "\t", quote = F, row.names =F)
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T)
write.table(paste(all_traits[i], envs[j], sep = " "), out_file, append = T, sep = "\t", quote = F, row.names =F)
write.table(trait_anovas[[j]], out_file, append = T, sep = "\t", quote = F, row.names = F)
cat("\n", out_file, append = T)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
for (i in 1:length(all_traits)) {
dir <- dirs[grepl(all_traits[i], dirs)]
files <- list.files(dir, full.names = T)
anovas <- files[grepl("anova", files)][-5]
for (j in 1:length(anovas)) {
trait_anovas[[j]] <- read.table(anovas[j], header = T, fill = T)
write.table(paste(all_traits[i], envs[j], sep = "\t"), out_file, append = T, sep = "\t", quote = F, row.names =F)
write.table(trait_anovas[[j]], out_file, append = T, sep = "\t", quote = F, row.names = F)
cat("\n", out_file, append = T, row.names = F)
}
all_anovas[[i]] <- do.call("rbind", trait_anovas)
}
R.Version()
