lod_intervals_final <- lod_intervals %>% arrange(trait, env, year, as.numeric(lg), map, famID) %>% select(-group)
head(lod_intervals_final)
lod_intervals_final$r2 <- as.numeric(lod_intervals_final$r2)
lod_intervals_final$alpha <- as.numeric(lod_intervals_final$alpha)
lod_intervals_final$gamma <- as.numeric(lod_intervals_final$gamma)
#### Step 7: Invert the Results on the Chromosomes that Require it ####
# some of the linkage groups were inverted in the map making process - should have caught this earlier, but... here we are
# instead of re-doing the analysis, we can convert the positions here
# these are the LGs that need inversion
invert <- c(01, 03, 05, 07, 08, 09, 10, 13, 14, 16, 17, 20)
# load in the map and calculate max positions
map <- read.table("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Introduction/Scripts for Github/JoinMap/output/Map Files for MapQTL/Formatted for R/no_group_inverted.map", header = F)
colnames(map) <- c("marker", "pos")
max_pos <- map %>% mutate(chrom = as.numeric(substr(marker, 4, 5))) %>% group_by(chrom) %>% summarise(max(pos)) %>% as.data.frame()
head(lod_intervals_final) # watch what happens to 9
for (i in 1:nrow(lod_intervals_final)) {
if (lod_intervals_final$lg[i] %in% invert) {
conversion_factor <- max_pos %>% filter(chrom  == lod_intervals_final$lg[i]) %>% as.data.frame()
conversion_factor <- conversion_factor$`max(pos)`
lod_intervals_final$left[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$left[i]))
lod_intervals_final$center[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$center[i]))
lod_intervals_final$right[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$right[i]))
}
}
head(lod_intervals_final)
## sometimes the left and rights are out of order now that I reversed the order of the map.
# fix that here
for (i in 1:nrow(lod_intervals_final)) {
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval_sorted <- sort(interval)
lod_intervals_final$left[i] <- interval_sorted[1]
lod_intervals_final$center[i] <- interval_sorted[2]
lod_intervals_final$right[i] <- interval_sorted[3]
}
#### write out all results
write.csv(lod_intervals_final, paste(dir, folder, "/output", "/lod_intervals_final.csv", sep = ""), row.names = F)
#### Step 7: Load in the Linkage Mapping Results ####
# read in final LOD intervals from "Thresholds and 2-LOD Intervals.R
lod_intervals <- read.csv(paste(dir, "/QTL Linkage Mapping/output/lod_intervals_final.csv", sep = ""))
# select only QTL that were detected in the combined analysis to feature in the figure
lod_intervals_ed <- lod_intervals %>%
filter(famID == "combined") %>%
mutate(env = toupper(env),
chr = paste("LG", str_pad(lg, width = 2, side = c("left"), pad = "0"), sep = ""),
env_year = paste(env, year, sep = ""),
marker_name = NA) %>%
select(lg, left, right, famID, trait, env, year, marker_name, chr, env_year) %>%
arrange(lg, left, env_year)
# write out the result and manually combine approximately overlapping intervals and edit marker names
write.csv(lod_intervals_ed, "/Users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Introduction/Scripts for Github/Visualize Results/data/lod_intervals_ed.csv", row.names = F)
# arrange the results by trait, year, lg, map and family
lod_intervals_final <- lod_intervals %>% arrange(trait, env, year, as.numeric(lg), map, famID) %>% select(-group)
head(lod_intervals_final)
# arrange the results by trait, year, lg, map and family
lod_intervals_final <- lod_intervals %>% arrange(trait, env, year, as.numeric(lg), map, famID) %>% select(-group)
#### Step 6: Create a Table of Family Effects and Summary ####
files <- list.files(paste(dir, folder, "/output/", sep = ""), full.names = TRUE)
all_files <- lapply(files, read.table, header = T)
lod_intervals <- do.call("rbind", all_files) %>% arrange(lg, group)
#### Step 6: Create a Table of Family Effects and Summary ####
files <- list.files(paste(dir, folder, "/output/", sep = ""), full.names = TRUE)
all_files <- lapply(files, read.table, header = T)
lod_intervals <- do.call("rbind", all_files) %>% arrange(lg, group)
# change NA for family to "combined"
lod_intervals <- data.frame(lapply(lod_intervals, as.character), stringsAsFactors=FALSE)
for (i in 1:nrow(lod_intervals)) {
if (is.na(lod_intervals$famID[i])) {
lod_intervals$famID[i] <- "combined"
}
}
# arrange the results by trait, year, lg, map and family
lod_intervals_final <- lod_intervals %>% arrange(trait, env, year, as.numeric(lg), map, famID) %>% select(-group)
head(lod_intervals_final)
lod_intervals_final$r2 <- as.numeric(lod_intervals_final$r2)
lod_intervals_final$alpha <- as.numeric(lod_intervals_final$alpha)
lod_intervals_final$gamma <- as.numeric(lod_intervals_final$gamma)
#### Step 7: Invert the Results on the Chromosomes that Require it ####
# some of the linkage groups were inverted in the map making process - should have caught this earlier, but... here we are
# instead of re-doing the analysis, we can convert the positions here
# these are the LGs that need inversion
invert <- c(01, 03, 05, 07, 08, 09, 10, 13, 14, 16, 17, 20)
# load in the map and calculate max positions
map <- read.table("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Introduction/Scripts for Github/JoinMap/output/Map Files for MapQTL/Formatted for R/no_group_inverted.map", header = F)
colnames(map) <- c("marker", "pos")
max_pos <- map %>% mutate(chrom = as.numeric(substr(marker, 4, 5))) %>% group_by(chrom) %>% summarise(max(pos)) %>% as.data.frame()
head(lod_intervals_final) # watch what happens to 9
for (i in 1:nrow(lod_intervals_final)) {
if (lod_intervals_final$lg[i] %in% invert) {
conversion_factor <- max_pos %>% filter(chrom  == lod_intervals_final$lg[i]) %>% as.data.frame()
conversion_factor <- conversion_factor$`max(pos)`
lod_intervals_final$left[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$left[i]))
lod_intervals_final$center[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$center[i]))
lod_intervals_final$right[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$right[i]))
}
}
head(lod_intervals_final)
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval
interval_sorted <- sort(interval)
interval_sorted
lod_intervals_final
## sometimes the left and rights are out of order now that I reversed the order of the map.
# fix that here
i = 2
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval_sorted <- sort(interval)
lod_intervals_final$left[i] <- interval_sorted[1]
interval
interval_sorted
lod_intervals_final
for (i in 1:nrow(lod_intervals_final)) {
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval_sorted <- sort(interval)
lod_intervals_final$left[i] <- interval_sorted[1]
lod_intervals_final$center[i] <- interval_sorted[2]
lod_intervals_final$right[i] <- interval_sorted[3]
}
lod_intervals_final
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval_sorted <- sort(interval)
lod_intervals_final$left[i] <- interval_sorted[1]
interval_sorted
## sometimes the left and rights are out of order now that I reversed the order of the map.
# fix that here
i = 2
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval_sorted <- sort(interval)
interval_sorted
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval_sorted <- sort(interval)
lod_intervals_final$left[i] <- interval_sorted[1]
lod_intervals_final$center[i] <- interval_sorted[2]
lod_intervals_final$right[i] <- interval_sorted[3]
for (i in 1:nrow(lod_intervals_final)) {
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval_sorted <- sort(interval)
lod_intervals_final$left[i] <- interval_sorted[1]
lod_intervals_final$center[i] <- interval_sorted[2]
lod_intervals_final$right[i] <- interval_sorted[3]
}
#### write out all results
write.csv(lod_intervals_final, paste(dir, folder, "/output", "/lod_intervals_final.csv", sep = ""), row.names = F)
# load packages
library("sommer")
library("vcfR")
library("dplyr")
library("readr")
library("tibble")
library("multtest")
library("gplots")
library("LDheatmap")
library("genetics")
library("ape")
library("EMMREML")
library("compiler") #this library is already installed in R
library("scatterplot3d")
library("cowplot")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install(c("multtest"))
<- list.files(paste(dir, "/Phenotypic Data Analysis/data", sep = ""), pattern = "emmeans_genet")
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data", sep = ""), pattern = "emmeans_genet")
files
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data" trait[1], sep = ""), pattern = "emmeans_genet")
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", trait[1], sep = ""), pattern = "emmeans_genet")
files
paste(dir, "/Phenotypic Data Analysis/data/", trait[1], sep = "")
#### Step 1: Load in Emmeans ###
# create a vector of traits
traits <- c("emergence_percent", "anthesis_score")
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", trait[1], sep = ""), pattern = "emmeans_genet")
files
paste(dir, "/Phenotypic Data Analysis/data/", trait[1], sep = "")
#### Step 1: Load in Emmeans ###
# create a vector of traits
traits <- c("emergence_percent", "anthesis_score")
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", trait[1], sep = ""), pattern = "emmeans_genet")
files
paste(dir, "/Phenotypic Data Analysis/data/", trait[1], sep = "")
#### Step 1: Load in Emmeans ###
# create a vector of traits
traits <- c("emergence_percent", "anthesis_score")
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet")
files
files
floret_score
emmeans <- list()
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet")
for (j in 1:length(files)) {
emmeans[[j]] <- read.table(files[j], header = T) %>% mutate(year = year[j], loc = loc[j])
}
files
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
for (j in 1:length(files)) {
emmeans[[j]] <- read.table(files[j], header = T) %>% mutate(year = year[j], loc = loc[j])
}
emmeans
traits[1]
emergence_percent_emmeans <- list()
emergence_percent_emmeans <- list()
for (j in 1:length(files)) {
emergence_percent_emmeans[[j]] <- read.table(files[j], header = T) %>% mutate(year = year[j], loc = loc[j])
}
emergence_percent <- list()
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>% mutate(year = year[j], loc = loc[j])
}
anthesis_score <- list()
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[2], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
anthesis_score <- list()
for (j in 1:length(files)) {
anthesis_score[[j]] <- read.table(files[j], header = T) %>% mutate(year = year[j], loc = loc[j])
}
# anthesis_score
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[2], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
anthesis_score <- list()
for (j in 1:length(files)) {
anthesis_score[[j]] <- read.table(files[j], header = T) %>% mutate(year = year[j], loc = loc[j])
}
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>% mutate(year = year[j], loc = loc[j])
}
# anthesis_score
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[2], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
anthesis_score <- list()
for (j in 1:length(files)) {
anthesis_score[[j]] <- read.table(files[j], header = T) %>% mutate(year = year[j], loc = loc[j])
}
# read in backbone
backbone <- read.csv(paste(in_path, "/backbone.csv", sep = ""), header = T)
in_path
# read in backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/Data/", "/backbone.csv", sep = ""), header = T)
backbone
backbone1 <- backbone %>% select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
distinct() %>%
select(-plantID3, -famID)
backbone1 <- backbone %>% select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
distinct() %>%
dplyr::select(-plantID3, -famID)
# read in backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/Data/", "/backbone.csv", sep = ""), header = T)
backbone1 <- backbone %>%
dplyr::select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
distinct() %>%
dplyr::select(-plantID3, -famID)
# read in backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/Data/", "/backbone.csv", sep = ""), header = T)
backbone <- backbone %>%
dplyr::select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
distinct() %>%
dplyr::select(-plantID3, -famID)
# read in backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/Data/", "/backbone.csv", sep = ""), header = T) %>%
dplyr::select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
distinct() %>%
dplyr::select(-plantID3, -famID)
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(., backbone, by = "famID_plantID3")
}
emergence_percent
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3")
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3")
}
emergence_percent
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(., , by = "famID_plantID3")
}
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(., , by = "famID_plantID3")
}
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(., by = "famID_plantID3")
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(., by = "famID_plantID3")
}
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(., backbone, by = "famID_plantID3")
}
emergence_percent
emergence_percent[[4]] %>% group_by(famID, plantID3) %>% tally() %>% arrange(-n)
files
emergence_percent
backbone
# read in backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/Data/", "backbone.csv", sep = ""), header = T) %>%
dplyr::select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
distinct() %>%
dplyr::select(-plantID3, -famID)
# read in backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/Data/", "backbone.csv", sep = ""), header = T) %>%
dplyr::select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
dplyr::select(-plantID3, -famID) %>%
distinct()
backbone
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(., backbone, by = "famID_plantID3") %>%
}
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(., backbone, by = "famID_plantID3")
}
emergence_percent
emergence_percent[[4]] %>% group_by(famID, plantID3) %>% tally() %>% arrange(-n)
emergence_percent[[4]] %>% group_by(longID) %>% tally() %>% arrange(-n)
View(emergence_percent[[4]])
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3")
}
emergence_percent
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean)
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean)
}
emergence_percent
View(emergence_percent[[4]]) %>% group_by(longID) %>% tally() %>% arrange(-n)
emergence_percent[[4]]
emergence_percent[[4]] %>% group_by(longID) %>% tally() %>% arrange(-n)
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID))
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID))
}
emergence_percent
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
emergence_percent
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID))
l
l
l
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID))
}
emergence_percent[[4]] %>% group_by(longID) %>% tally() %>% arrange(-n)
# read in emmeans files for emergence_percent
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
emergence_percent <- list()
for (j in 1:length(files)) {
emergence_percent[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID))
}
emergence_percent[[4]] %>% group_by(longID) %>% tally() %>% arrange(-n)
backbone
backbone %>% group_by(famID) %>% tally()
backbone %>% group_by(famID) %>% tally()
backbone %>% group_by(longID) %>% tally()
backbone %>% group_by(longID) %>% tally() %>% arrange(-n)
# anthesis_score
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[2], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
anthesis_score <- list()
for (j in 1:length(files)) {
anthesis_score[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID))
}
anthesis_score
# read in emmeans files for anthesis_score
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[2], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
# load in hapmap file
myG <- read_tsv(paste(dir, "/Variant Filtering and Imputation/output/NAM_GATK_imputed.hmp.txt")
# load in hapmap file
myG <- read_tsv(paste(dir, "/Variant Filtering and Imputation/output/NAM_GATK_imputed.hmp.txt"))
# load in hapmap file
myG <- read_tsv(paste(dir, "/Variant Filtering and Imputation/output/NAM_GATK_imputed.hmp.txt", sep = ""))
paste(dir, "/Variant Filtering and Imputation/output/NAM_GATK_imputed.hmp.txt", sep = "")
dir
# load in hapmap file
myG <- read_tsv(paste(dir, "Variant Filtering and Imputation/output", sep = ""))
library("readr")
# load in hapmap file
myG <- read_tsv(paste(dir, "Variant Filtering and Imputation/output", sep = ""))
install.packages("readr")
install.packages("readr")
library("readr")
# load in hapmap file
myG <- read_tsv(paste(dir, "Variant Filtering and Imputation/output", sep = ""))
remove.packages("readr", lib="~/Library/R/4.0/library")
install.packages("readr")
install.packages("readr")
library("readr")
# load in hapmap file
myG <- read_tsv(paste(dir, "Variant Filtering and Imputation/output", sep = ""))
# load in hapmap file
myG <- read_tsv(paste(dir, "Variant Filtering and Imputation/output/NAM_GATK_imputed.hmp.txt", sep = ""))
read_tsv
dir
# load in hapmap file
myG <- read_tsv("/Users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Introduction/Scripts for Github/Variant Filtering and Imputation/output/NAM_GATK_imputed.hmp.txt")
